/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package khanhpl.views;

import java.rmi.Naming;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import khanhpl.dto.RegistrationDTO;
import khanhpl.interfaces.RegistrationInterface;
import khanhpl.valid.RegistrationValidation;

/**
 *
 * @author Admin
 */
public class MainView extends javax.swing.JFrame {

    /**
     * Creates new form MainView
     */
    private RegistrationInterface registrationInterface;
    private DefaultTableModel tblRegistrationModel;
    private DefaultTableModel tblRegistrationSearchModel;
    private boolean isFindByID = false;
    private boolean isDelete = false;
    private boolean isAddNew = false;
    private boolean isUpdate = false;

    public MainView() {
        initComponents();
        getConnectionToServer();
        loadTblRegistration();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngrGender = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRegistration = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        cbxSortByName = new javax.swing.JComboBox<>();
        btnGetAllData = new javax.swing.JButton();
        txtSearchByName = new javax.swing.JTextField();
        btnSearchByName = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtRegistrationID = new javax.swing.JTextField();
        txtFullName = new javax.swing.JTextField();
        txtAge = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtPhone = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        txaAddress = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        txaSymptoms = new javax.swing.JTextArea();
        btnSearchByID = new javax.swing.JButton();
        btnAddNew = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        rdMale = new javax.swing.JRadioButton();
        rdFemale = new javax.swing.JRadioButton();
        txtNumberOfPet = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("PET HEATHCARE MANAGEMENT");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Main part", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 13), new java.awt.Color(0, 102, 102))); // NOI18N

        tblRegistration.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblRegistration.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblRegistrationMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblRegistration);

        jLabel2.setText("Sort By Name:");

        cbxSortByName.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Descending", "Ascending" }));
        cbxSortByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxSortByNameActionPerformed(evt);
            }
        });

        btnGetAllData.setText("Get all Data");
        btnGetAllData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetAllDataActionPerformed(evt);
            }
        });

        btnSearchByName.setText("Search By Name");
        btnSearchByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchByNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbxSortByName, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearchByName, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSearchByName, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGetAllData, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(95, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cbxSortByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGetAllData))
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearchByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchByName))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Detailed Part", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 13), new java.awt.Color(0, 102, 102))); // NOI18N

        jLabel3.setText("Registration ID:");

        jLabel4.setText("FullName:");

        jLabel5.setText("Age:");

        jLabel6.setText("Email:");

        jLabel7.setText("Phone:");

        jLabel8.setText("Address:");

        jLabel9.setText("Number of Pet:");

        jLabel10.setText("Symptoms:");

        txaAddress.setColumns(20);
        txaAddress.setRows(5);
        jScrollPane2.setViewportView(txaAddress);

        txaSymptoms.setColumns(20);
        txaSymptoms.setRows(5);
        jScrollPane3.setViewportView(txaSymptoms);

        btnSearchByID.setText("Search");
        btnSearchByID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchByIDActionPerformed(evt);
            }
        });

        btnAddNew.setText("Add New");
        btnAddNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jLabel11.setText("Gender:");

        btngrGender.add(rdMale);
        rdMale.setText("Male");

        btngrGender.add(rdFemale);
        rdFemale.setText("Female");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txtNumberOfPet, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtFullName)
                            .addComponent(txtEmail)
                            .addComponent(txtPhone)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rdMale)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rdFemale))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txtRegistrationID, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnSearchByID, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnAddNew)
                        .addGap(110, 110, 110)
                        .addComponent(btnSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDelete)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtRegistrationID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchByID))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtFullName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(rdMale)
                    .addComponent(rdFemale))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(50, 50, 50))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)))
                .addGap(3, 3, 3)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtNumberOfPet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddNew)
                    .addComponent(btnSave)
                    .addComponent(btnDelete))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(206, 206, 206)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 591, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(66, 66, 66))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        String registrationID = txtRegistrationID.getText().trim();
        String fullName = txtFullName.getText().trim();
        String ageText = txtAge.getText().trim();
        boolean gender;
        if (rdMale.isSelected()) {
            gender = true;
        } else {
            gender = false;
        }
        String email = txtEmail.getText().trim();
        String phone = txtPhone.getText().trim();
        String address = txaAddress.getText().trim();
        String numberOfPetText = txtNumberOfPet.getText().trim();
        String symptoms = txaSymptoms.getText().trim();

        RegistrationValidation regisValid = new RegistrationValidation();
        if (!regisValid.checkRegisID(registrationID)) {
            JOptionPane.showMessageDialog(null, "RegistrationID: max length is 10, not null, not contains special characters");
            return;
        }
        if (!regisValid.checkFullName(fullName)) {
            JOptionPane.showMessageDialog(null, "FullName: max length is 50");
            return;
        }
        if (!regisValid.checkAge(ageText)) {
            JOptionPane.showMessageDialog(null, "Age must > 0 and Integer type");
            return;
        }

        if (!regisValid.checkEmail(email)) {
            JOptionPane.showMessageDialog(null, " Email: max length is 30, contain only one “@” character, not contain other special characters");
            return;
        }
        if (!regisValid.checkPhone(phone)) {
            JOptionPane.showMessageDialog(null, " Phone: max length is 15, contain numeric characters only (0-9)");
            return;
        }
        if (!regisValid.checkAddress(address)) {
            JOptionPane.showMessageDialog(null, "Address must not be left blank");
            return;
        }
        if (!regisValid.checkNumberOfPet(numberOfPetText)) {
            JOptionPane.showMessageDialog(null, "Number of pet: must be > 0");
            return;
        }
        if (!regisValid.checkSymptoms(symptoms)) {
            JOptionPane.showMessageDialog(null, "Symptoms must not be left black");
            return;
        }
        int age = Integer.valueOf(ageText);
        int numberOfPet = Integer.parseInt(numberOfPetText);
        //add new mode
        if (isAddNew) {
            try {
                if (!regisValid.checkDupRegisID(registrationID)) {
                    JOptionPane.showMessageDialog(null, "Registration ID has been existed");
                    return;
                }
                RegistrationDTO dto = new RegistrationDTO(registrationID, fullName, age, gender, email, phone, address, numberOfPet, symptoms);

                boolean created = registrationInterface.createRegistration(dto);
                if (created) {
                    txtRegistrationID.setText("");
                    txtRegistrationID.setEditable(true);
                    txtFullName.setText("");
                    txtAge.setText("");
                    btngrGender.clearSelection();
                    txtEmail.setText("");
                    txtPhone.setText("");
                    txaAddress.setText("");
                    txtNumberOfPet.setText("");
                    txaSymptoms.setText("");
                    isAddNew = false;
                    isUpdate = false;
                    isFindByID = false;
                    loadTblRegistration();
                    tblRegistration.updateUI();
                    JOptionPane.showMessageDialog(this, "Add Success!");
                } else {
                    JOptionPane.showMessageDialog(this, "Add Failed!");
                }

            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Cannot add!");
            }

        } else { //update
            try {
                if (!isUpdate) {
                    JOptionPane.showMessageDialog(null, "Please press Add New button before save!!!");
                    return;
                }
                RegistrationDTO dto = new RegistrationDTO(registrationID, fullName, age, gender, email, phone, address, numberOfPet, symptoms);

                boolean updated = registrationInterface.updateRegistration(dto);
                if (updated) {
                    txtRegistrationID.setText("");
                    txtRegistrationID.setEditable(true);
                    txtFullName.setText("");
                    txtAge.setText("");
                    btngrGender.clearSelection();
                    txtEmail.setText("");
                    txtPhone.setText("");
                    txaAddress.setText("");
                    txtNumberOfPet.setText("");
                    txaSymptoms.setText("");
                    isAddNew = false;
                    isUpdate = false;
                    isFindByID = false;
                    isDelete = false;
                    loadTblRegistration();
                    tblRegistration.updateUI();
                    JOptionPane.showMessageDialog(this, "Update Success!");
                } else {
                    JOptionPane.showMessageDialog(this, "Update Failed!");
                }
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Cannot update...");
            }
        }


    }//GEN-LAST:event_btnSaveActionPerformed

    private void tblRegistrationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRegistrationMouseClicked
        // TODO add your handling code here:
        isFindByID = true;
        isAddNew = false;
        isUpdate = true;
        isDelete = true;
        int selectedRow = tblRegistration.getSelectedRow();
        String selectedId = (String) tblRegistration.getValueAt(selectedRow, 0);

        try {
            RegistrationDTO dto = registrationInterface.findByRegistrationID(selectedId);
            txtRegistrationID.setText(dto.getRegistrationID());
            txtRegistrationID.setEditable(false);
            txtFullName.setText(dto.getFullName());
            txtAge.setText(Integer.toString(dto.getAge()));
            if (dto.isGender()) {
                rdMale.setSelected(true);
                rdFemale.setSelected(false);

            } else {
                rdMale.setSelected(false);
                rdFemale.setSelected(true);
            }
            txtEmail.setText(dto.getEmail());
            txtPhone.setText(dto.getPhone());
            txaAddress.setText(dto.getAddress());
            txtNumberOfPet.setText(Integer.toString(dto.getNumberOfPet()));
            txaSymptoms.setText(dto.getSymptoms());

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_tblRegistrationMouseClicked

    private void btnGetAllDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetAllDataActionPerformed
        // TODO add your handling code here:
        isAddNew = false;
        isUpdate = false;
        isFindByID = false;
        isDelete = false;
        loadTblRegistration();
        txtRegistrationID.setText("");
        txtRegistrationID.setEditable(true);
        txtFullName.setText("");
        txtAge.setText("");
        btngrGender.clearSelection();
        txtEmail.setText("");
        txtPhone.setText("");
        txaAddress.setText("");
        txtNumberOfPet.setText("");
        txaSymptoms.setText("");
    }//GEN-LAST:event_btnGetAllDataActionPerformed

    private void btnSearchByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchByNameActionPerformed
        // TODO add your handling code here:
        String searchName = txtSearchByName.getText();
        if (searchName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nothing to Search!");
        } else {
            try {
                tblRegistrationSearchModel = new DefaultTableModel(new String[]{"ID", "Full Name", "Age", "Gender", "Phone", "Address"}, 0) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false; // or a condition at your choice with row and column
                    }
                };
                ArrayList<RegistrationDTO> registrationList = registrationInterface.findAllRegistrations();
                for (RegistrationDTO dto : registrationList) {
                    Vector searchData = new Vector();
                    String id = dto.getRegistrationID();
                    String fullName = dto.getFullName();
                    int age = dto.getAge();
                    String gender = ((dto.isGender()) ? "Male" : "Female");

                    String phone = dto.getPhone();
                    String address = dto.getAddress();
                    if (fullName.contains(searchName)) {
                        searchData.add(id);
                        searchData.add(fullName);
                        searchData.add(age);
                        searchData.add(gender);

                        searchData.add(phone);
                        searchData.add(address);
                        tblRegistrationSearchModel.addRow(searchData);
                    }
                }

                tblRegistration.setModel(tblRegistrationSearchModel);
                tblRegistration.updateUI();
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Cannot Search!");
            }
        }
    }//GEN-LAST:event_btnSearchByNameActionPerformed

    private void cbxSortByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxSortByNameActionPerformed
        // TODO add your handling code here:
        String sortBy = cbxSortByName.getSelectedItem().toString();
        if (sortBy.equals("Ascending")) {
            try {
                ArrayList<RegistrationDTO> dto = registrationInterface.findAllRegistrations();
                sortAscendingByRegistrationName(dto);
                txtRegistrationID.setText("");
                txtRegistrationID.setEditable(true);
                txtFullName.setText("");
                txtAge.setText("");
                btngrGender.clearSelection();
                txtEmail.setText("");
                txtPhone.setText("");
                txaAddress.setText("");
                txtNumberOfPet.setText("");
                txaSymptoms.setText("");

            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Cannot sort ascending...");
            }
        } else if (sortBy.equals("Descending")) {
            try {
                ArrayList<RegistrationDTO> dto = registrationInterface.findAllRegistrations();
                sortDescendingByRegistrationName(dto);
                txtRegistrationID.setText("");
                txtRegistrationID.setEditable(true);
                txtFullName.setText("");
                txtAge.setText("");
                btngrGender.clearSelection();
                txtEmail.setText("");
                txtPhone.setText("");
                txaAddress.setText("");
                txtNumberOfPet.setText("");
                txaSymptoms.setText("");

            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Cannot sort descending...");
            }
        }
    }//GEN-LAST:event_cbxSortByNameActionPerformed

    private void btnSearchByIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchByIDActionPerformed
        // TODO add your handling code here:
        isFindByID = true;
        String id = txtRegistrationID.getText().trim();
        if (!(id.length() > 0)) {
            JOptionPane.showMessageDialog(null, "Please input Registration ID for searching");
            return;
        } else {
            if (isFindByID) {
                try {
                    RegistrationDTO dto = registrationInterface.findByRegistrationID(id);

                    txtRegistrationID.setText(dto.getRegistrationID());
                    JOptionPane.showMessageDialog(this, "Found Success!");
                    txtRegistrationID.setEditable(false);
                    txtFullName.setText(dto.getFullName());
                    txtAge.setText(Integer.toString(dto.getAge()));
                    if (dto.isGender()) {
                        rdMale.setSelected(true);
                        rdFemale.setSelected(false);

                    } else {
                        rdMale.setSelected(false);
                        rdFemale.setSelected(true);
                    }
                    txtEmail.setText(dto.getEmail());
                    txtPhone.setText(dto.getPhone());
                    txaAddress.setText(dto.getAddress());
                    txtNumberOfPet.setText(Integer.toString(dto.getNumberOfPet()));
                    txaSymptoms.setText(dto.getSymptoms());
                    isAddNew = false;
                    isUpdate = true;
                } catch (NullPointerException e) {
                    JOptionPane.showMessageDialog(this, "Cannot find!");
                } catch (RemoteException ex) {
                    Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_btnSearchByIDActionPerformed

    private void btnAddNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewActionPerformed
        // TODO add your handling code here:
        isAddNew = true;
        isUpdate = false;
        isDelete = false;
        txtRegistrationID.setText("");
        txtRegistrationID.setEditable(true);
        txtFullName.setText("");
        txtAge.setText("");
        btngrGender.clearSelection();
        txtEmail.setText("");
        txtPhone.setText("");
        txaAddress.setText("");
        txtNumberOfPet.setText("");
        txaSymptoms.setText("");
    }//GEN-LAST:event_btnAddNewActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        String id = txtRegistrationID.getText();
        int confirm = JOptionPane.showConfirmDialog(this, "Do you want to remove this registration?");
        if (confirm == JOptionPane.YES_OPTION) {
            if (isDelete) {
                try {
                    boolean deleted = registrationInterface.removeRegistration(id);
                    if (deleted) {
                        txtRegistrationID.setText("");
                        txtRegistrationID.setEditable(true);
                        txtFullName.setText("");
                        txtAge.setText("");
                        btngrGender.clearSelection();
                        txtEmail.setText("");
                        txtPhone.setText("");
                        txaAddress.setText("");
                        txtNumberOfPet.setText("");
                        txaSymptoms.setText("");
                        loadTblRegistration();
                        isAddNew = false;
                        isUpdate = false;
                        isDelete = false;
                        tblRegistration.updateUI();
                        JOptionPane.showMessageDialog(this, "Remove Success!");
                    } else {
                        JOptionPane.showMessageDialog(this, "Remove Fail!");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error while deleting...");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Nothing to Remove!");
            }
        } else {
            txtRegistrationID.setText("");
            txtRegistrationID.setEditable(true);
            txtFullName.setText("");
            txtAge.setText("");
            btngrGender.clearSelection();
            txtEmail.setText("");
            txtPhone.setText("");
            txaAddress.setText("");
            txtNumberOfPet.setText("");
            txaSymptoms.setText("");
            isAddNew = false;
            isUpdate = false;
            isDelete = false;
            loadTblRegistration();
            tblRegistration.updateUI();
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNew;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnGetAllData;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearchByID;
    private javax.swing.JButton btnSearchByName;
    private javax.swing.ButtonGroup btngrGender;
    private javax.swing.JComboBox<String> cbxSortByName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JRadioButton rdFemale;
    private javax.swing.JRadioButton rdMale;
    private javax.swing.JTable tblRegistration;
    private javax.swing.JTextArea txaAddress;
    private javax.swing.JTextArea txaSymptoms;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFullName;
    private javax.swing.JTextField txtNumberOfPet;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtRegistrationID;
    private javax.swing.JTextField txtSearchByName;
    // End of variables declaration//GEN-END:variables

    private void getConnectionToServer() {
        try {
            String rmiUrl = "rmi://localhost:8888/RegistrationServer";
            registrationInterface = (RegistrationInterface) Naming.lookup(rmiUrl);
        } catch (Exception e) {
            System.out.println("Error while connecting to server...");
            e.printStackTrace();
        }
    }

    private void loadTblRegistration() {
        try {

            tblRegistrationModel = new DefaultTableModel(new String[]{"ID", "Full Name", "Age", "Gender", "Phone", "Address"}, 0) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };

            ArrayList<RegistrationDTO> registrationList = registrationInterface.findAllRegistrations();
            for (RegistrationDTO dto : registrationList) {
                Vector registrationData = new Vector();
                String id = dto.getRegistrationID();
                String fullName = dto.getFullName();
                int age = dto.getAge();
                String gender = ((dto.isGender()) ? "Male" : "Female");
                String phone = dto.getPhone();
                String address = dto.getAddress();
                registrationData.add(id);
                registrationData.add(fullName);
                registrationData.add(age);
                registrationData.add(gender);
                registrationData.add(phone);
                registrationData.add(address);
                tblRegistrationModel.addRow(registrationData);
            }
            tblRegistration.setModel(tblRegistrationModel);
            tblRegistration.updateUI();
        } catch (Exception e) {
            System.out.println("Cannot load data to table...");
            e.printStackTrace();
        }
    }

    private void sortAscendingByRegistrationName(ArrayList<RegistrationDTO> regisList) {
        Collections.sort(regisList, new Comparator<RegistrationDTO>() {
            @Override
            public int compare(RegistrationDTO o1, RegistrationDTO o2) {
                return o1.getFullName().compareTo(o2.getFullName());
            }
        });
        tblRegistrationModel.setRowCount(0);
        for (RegistrationDTO dto : regisList) {
            Vector searchData = new Vector();
            String id = dto.getRegistrationID();
            String fullName = dto.getFullName();
            int age = dto.getAge();
            String gender = ((dto.isGender()) ? "Male" : "Female");
            String phone = dto.getPhone();
            String address = dto.getAddress();
            searchData.add(id);
            searchData.add(fullName);
            searchData.add(age);
            searchData.add(gender);
            searchData.add(phone);
            searchData.add(address);
            tblRegistrationModel.addRow(searchData);
        }
        tblRegistration.setModel(tblRegistrationModel);
        tblRegistration.updateUI();
    }

    private void sortDescendingByRegistrationName(ArrayList<RegistrationDTO> regisList) {
        Collections.sort(regisList, new Comparator<RegistrationDTO>() {
            @Override
            public int compare(RegistrationDTO o1, RegistrationDTO o2) {
                return o2.getFullName().compareTo(o1.getFullName());
            }

        });
        tblRegistrationModel.setRowCount(0);
        for (RegistrationDTO dto : regisList) {
            Vector searchData = new Vector();
            String id = dto.getRegistrationID();
            String fullName = dto.getFullName();
            int age = dto.getAge();
            String gender = ((dto.isGender()) ? "Male" : "Female");
            String phone = dto.getPhone();
            String address = dto.getAddress();
            searchData.add(id);
            searchData.add(fullName);
            searchData.add(age);
            searchData.add(gender);
            searchData.add(phone);
            searchData.add(address);
            tblRegistrationModel.addRow(searchData);
        }
        tblRegistration.setModel(tblRegistrationModel);
        tblRegistration.updateUI();

    }
}
